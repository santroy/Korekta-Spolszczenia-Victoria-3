# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

@stat_item_width = 235
@right_max_width = 150

types pop_details_panel
{
	type pop_details_panel = default_block_window_two_lines {
		name = "pop_details_panel"
		enabled = yes
		datacontext = "[PopDetailsPanel.AccessPop]"

		blockoverride "window_header_name"
		{
			#text = "[Pop.GetCulture.GetNameNoFormatting|U] [Pop.GetReligion.GetNameNoFormatting] [Pop.GetNameNoIcon]" # ZMIANA
			text = "[Pop.GetNameNoIcon] ([Pop.GetReligion.GetCustom('PL_RELIGION_ADJ_PLURAL')|U] [Pop.GetCulture.GetCustom('PL_CULTURE_COLLECTIVE_PLURAL')|U])" 
			tooltipwidget = {
				FancyTooltip_Pop = {}
			}
		}

		blockoverride "window_header_name_line_two"
		{
			text = "POP_DETAILS_LINE_TWO"
		}

		blockoverride "goto_button" {
			button_icon_goto = {
				datacontext = "[Pop.GetState]"
				size = { 30 30 }
				onclick = "[InformationPanelBar.OpenStatePanel(State.AccessSelf)]"
				tooltip = "GO_TO_BUTTON_STATE"
			}
		}

		blockoverride "scrollarea_content"
		{
			flowcontainer = {
				using = default_list_position
				direction = vertical
				spacing = 9
				margin_bottom = 20

				### POP PORTRAIT
				widget = {
					size = { @panel_width_plus_14 370 }
					parentanchor = hcenter

					# state image
					widget = {
						size = { @panel_width_plus_14 400 }
						scissor = yes

						icon = {
							size = { @panel_width_plus_14 200 }
							scale = 2
							texture = "[Pop.GetState.GetBestTexture]"
							alpha = 0.6
							using = fade_top_illus
							parentanchor = hcenter
						}
					}

					# portrait
					flowcontainer = {

						parentanchor = hcenter
						position = { -65 15 }
						pop_portrait_big_female = {}
					}


					flowcontainer = {

						parentanchor = hcenter
						position = { 65 5 }
						pop_portrait_big_male = { }

					}


					# icon
					icon = {
						name = "tutorial_highlight_pop_profession"
						size = { 70 70 }
						texture = "gfx/interface/backgrounds/round_button_bg.dds"
						parentanchor = top|right
						position = { -7 10 }

						icon = {
							size = { 60 60 }
							parentanchor = center
							texture = "[Pop.GetTexture]"
							tooltipwidget = {
								FancyTooltip_PopType = {
									datacontext = "[Pop.GetPopType]"
								}
							}
						}
					}
				}


				textbox = {
					name = "tutorial_highlight_pop_standard_of_living"
					using = main_bg
					text = "[Pop.GetFormattedStandardOfLivingLabel|v] ([Pop.GetFormattedStandardOfLiving|v])"
					using = pop_sol_tooltip_with_graph
					autoresize = yes
					using = fontsize_xl #used to be fontsize_mega but because of texticons it had to be changed to xl
					margin = { 60 10 }
					align = nobaseline
					parentanchor = hcenter
				}

				### MAIN STATS
				flowcontainer = {
					name = "tutorial_highlight_population"
					minimumsize = { @panel_width -1 }
					maximumsize = { @panel_width -1 }
					parentanchor = hcenter
					direction = vertical
					margin = { 20 15 }
					margin_bottom = 15

					using = main_bg

					textbox = {
						text = "POPULATION_TITLE"
						using = pop_population_tooltip_with_graph
						size = { 500 23 }
						elide = right
						align = left|nobaseline
					}

					flowcontainer = {
						margin_bottom = 10
						textbox = {
							text = "[Pop.GetTotalSize|Dv] (#variable [Pop.GetPopGrowth|+=D]#!)"
							using = pop_population_tooltip_with_graph
							size = { 170 35 }
							elide = right
							align = left|nobaseline
							using = fontsize_xl
						}

						textbox = {
							text = "@money![Pop.GetIncome|vD]"
							tooltip = "[Pop.GetIncomeDesc]"
							size = { 90 35 }
							elide = right
							align = right|nobaseline
							using = fontsize_xl
						}

						widget = { size = { 10 5 }}

						textbox = {
							text = "IN_TOTAL"

							size = { 240 35 }
							elide = right
							align = left|nobaseline
							using = fontsize_xl
						}
					}

					widget = { size = { 1 1 }}

					flowcontainer = {
						direction = vertical
						minimumsize = { 500 -1 }

						textbox = {
							text = "WORKING_ADULTS_TITLE"
							tooltip = "POP_WORKFORCE_TOOLTIP"
							size = { 500 23 }
							elide = right
							align = left|nobaseline
						}

						flowcontainer = {

							textbox = {
								text = "[Pop.GetNumWorkforce|Dv]"
								tooltip = "POP_WORKFORCE_TOOLTIP"

								size = { 130 25 }
								elide = right
								align = left|nobaseline
							}

							textbox = {
								text = "@money![Pop.GetWorkforceIncome|vD]"
								tooltip = "[Pop.GetWorkforceIncomeDesc]"

								size = { 130 25 }
								elide = right
								align = right|nobaseline
							}

							widget = { size = { 10 5 }}

							button = {
								visible = "[Pop.IsEmployed]"
								size = { 240 27 }
								using = clean_button
								onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(Pop.AccessBuilding)]"

								textbox = {
									margin_right = 35
									margin_left = 10
									text = "POP_WORK_INFO"
									size = { 100% 100% }
									align = nobaseline
									elide = right
									parentanchor = vcenter
								}
								icon = {
									position = { -5 0 }
									size = { 22 22 }
									texture = "[Pop.GetBuilding.GetTexture]"
									tooltip = "[Pop.GetBuilding.GetTooltip]"
									parentanchor = right|vcenter
								}
							}

							textbox = {
								size = { 240 27 }
								text = "UNEMPLOYED"
								align = left|nobaseline
								visible = "[Not(Pop.IsEmployed)]"
								alpha = 0.5
								elide = right
							}
						}
					}

					flowcontainer = {
						direction = vertical
						minimumsize = { 500 -1 }

						textbox = {
							text = "DEPENDENTS_TITLE"
							tooltip = "POP_DEPENDENTS_TOOLTIP"
							size = { 500 23 }
							elide = right
							align = left|nobaseline
						}

						flowcontainer = {

							textbox = {
								text = "[Pop.GetDependentsSize|Dv]"
								tooltip = "POP_DEPENDENTS_TOOLTIP"

								size = { 130 25 }
								elide = right
								align = left|nobaseline
							}
							textbox = {
								text = "@money![Pop.GetDependentIncome|vD]"
								tooltip = "[Pop.GetDependentIncomeDesc]"
								visible = "[GreaterThan_CFixedPoint(Pop.GetDependentIncome, '(CFixedPoint)0')]"

								size = { 130 25 }
								elide = right
								align = right|nobaseline
							}

							widget = { size = { 10 5 }}

							textbox = {
								text = "[Pop.GetDependentIncomeSources]"
								visible = "[GreaterThan_CFixedPoint(Pop.GetDependentIncome, '(CFixedPoint)0')]"
								size = { 240 27 }
								elide = right
								align = left|nobaseline
							}
						}
					}

					widget = { size = { 10 10 }}

					flowcontainer = {
						direction = horizontal

						textbox = {
							text = "NET_INCOME_TITLE"
							tooltip = TOOLTIP_POP_NET_INCOME

							size = { 100 25 }
						}

						textbox = {
							text = "#variable @money![Pop.GetMoney|D=+]#!"
							tooltip = TOOLTIP_POP_NET_INCOME

							size = { 100 25 }
						}
					}
				}

				### SIDE STATS
				flowcontainer = {
					parentanchor = hcenter
					margin = { 20 5 }
					spacing = 15

					background = {
						using = entry_bg_simple
					}

					flowcontainer = {
						name = "tutorial_highlight_pop_left_details"
						direction = vertical

						pop_details_side_stats_item = {
							blockoverride "text_left" {
								# ZMIANA
								#text = "STATE_TITLE"
								text = "STATE_TITLE_SHORT"
							}
							blockoverride "widget_right" {
								button = {
									size = { @right_max_width 27 }
									using = clean_button
									onclick = "[InformationPanelBar.OpenStatePanel(Pop.AccessState)]"

									textbox = {
										margin = { 10 0 }
										text = "[Pop.GetState.GetName]"
										size = { 100% 100% }
										align = right|nobaseline
										elide = right
										parentanchor = vcenter
									}
								}
							}
						}
						pop_details_side_stats_item = {
							blockoverride "text_left" {
								text = "CULTURE_TITLE"
							}
							blockoverride "widget_right" {
								button = {
									size = { @right_max_width 27 }
									using = clean_button
									onclick = "[InformationPanelBar.OpenCultureInfoPanel(Pop.AccessCulture)]"

									icon = {
										visible = "[Pop.IsAssimilating]"
										position = { 5 0 }
										size = { 25 25 }
										parentanchor = vcenter
										texture = "gfx/interface/icons/generic_icons/assimilation.dds"
										tooltip = "[Pop.GetPopAssimilationDesc]"
									}
									textbox = {
										margin = { 10 0 }
										text = "[Pop.GetCulture.GetName|U]" # ZMIANA U
										size = { 100% 100% }
										align = right|nobaseline
										elide = right
										parentanchor = vcenter
									}
								}
							}
						}
						pop_details_side_stats_item = {
							blockoverride "text_left" {
								text = "RELIGION_TITLE"
							}
							blockoverride "widget_right" {
								button = {
									datacontext = "[Pop.GetReligion]"
									size = { @right_max_width 27 }
									using = clean_button
									onclick = "[InformationPanelBar.OpenReligionInfoPanel(Pop.AccessReligion)]"

									icon = {
										position = { 5 0 }
										size = { 25 25 }
										parentanchor = vcenter
										texture = "[Religion.GetTexture]"
									}
									icon = {
										visible = "[Pop.IsConverting]"
										position = { 30 0 }
										size = { 25 25 }
										parentanchor = vcenter
										texture = "gfx/interface/icons/generic_icons/conversion.dds"
										tooltip = "[Pop.GetPopConversionDesc]"
									}
									textbox = {
										margin = { 10 0 }
										text = "[Religion.GetName]"
										size = { 100% 100% }
										margin_left = 30
										align = right|nobaseline
										elide = right
										parentanchor = vcenter
									}
								}
							}
						}
						pop_details_side_stats_item = {
							blockoverride "text_left" {
								text = "LITERACY_TITLE"
							}
							blockoverride "text_right" {
								text = "[Pop.GetLiteracyRate|%1v]"
								tooltip = "POP_POPULATION_LITERACY"
							}
						}
						pop_details_side_stats_item = {
							blockoverride "text_left" {
								text = "STATUS_TITLE"
								tooltip = "[concept_discrimination_desc]"
							}
							icon = {
								tooltip = "DISCRIMINATION_TOOLTIP"
								visible = "[Pop.IsDiscriminated]"
								texture = "gfx/interface/icons/generic_icons/discriminated_icon.dds"
								size = { 30 30 }
								parentanchor = right
							}

							icon = {
								tooltip = "ACCEPTED_TOOLTIP"
								visible = "[Not(Pop.IsDiscriminated)]"
								texture = "gfx/interface/icons/generic_icons/accepted_icon.dds"
								size = { 30 30 }
								parentanchor = right
							}
						}
						pop_details_side_stats_item = {
							visible = "[Pop.IsDiscriminated]"
							tooltip = "POP_DISCRIMINATED_TOOLTIP"

							blockoverride "text_left" {
								text = "POP_DISENFRANCHISED_HEADER"
							}
						}
					}

					vertical_divider = {}

					flowcontainer = {
						name = "tutorial_highlight_pop_right_details"
						direction = vertical
						pop_details_side_stats_item = {
							blockoverride "text_left" {
								text = "RADICALS"
							}
							blockoverride "text_right" {
								text = "#variable [Pop.GetNumRadicals|D]#!"
								tooltip = "RADICALS_TOOLTIP_POP"
							}
						}
						pop_details_side_stats_item = {
							blockoverride "text_left" {
								text = "LOYALISTS"
							}
							blockoverride "text_right" {
								text = "#variable [Pop.GetNumLoyalists|D]#!"
								tooltip = "LOYALISTS_TOOLTIP_POP"
							}
						}
						pop_details_side_stats_item = {
							blockoverride "text_left" {
								text = "PRIMARY_IG_TITLE"
							}
							ig_button = {
								visible = "[And(IsDataModelEmpty(Pop.AccessSupportedInterestGroups),Pop.GetLargestInterestGroup.IsValid)]"
								parentanchor = right
								size = { 30 30 }
								texture = "[InterestGroup.GetTexture]"
								using = tooltip_above
								blockoverride "tooltip" {}
								tooltip = "POP_IG_ATTRACTION_HEADER"
							}
							icon = {
								visible = "[And(IsDataModelEmpty(Pop.AccessSupportedInterestGroups),Not(Pop.GetLargestInterestGroup.IsValid))]"
								size = { 30 30 }
								texture = "gfx/interface/icons/ig_icons/politically_inactive.dds"
								parentanchor = right
								using = tooltip_above
								tooltipwidget = {
									FancyTooltip_PoliticallyInactive = {}
								}
							}

							# Henriks favourite hack to only show X number of items in a datamodel
							container = {
								maximumsize = { 94 30 }
								parentanchor = right
								scissor = yes

								flowcontainer = {
									spacing = 2
									datamodel = "[Pop.AccessSupportedInterestGroups]"

									item = {
										ig_button = {
											parentanchor = vcenter
											size = { 30 30 }
											texture = "[InterestGroup.GetTexture]"
											using = tooltip_above
											blockoverride "tooltip" {}
											tooltip = "POP_IG_ATTRACTION_HEADER"
										}
									}
								}
							}
						}
						pop_details_side_stats_item = {
							blockoverride "text_left" {
								text = "POL_STR_TITLE"
							}
							blockoverride "text_right" {
								text = "[Pop.GetPoliticalStrength|Kv]"
								using = pop_pol_str_tooltip_with_graph
								alpha = "[TransparentIfZero(Pop.GetLargestInterestGroup.GetClout)]"
							}
						}

						pop_details_side_stats_item = {
							visible = "[Pop.SupportsAnyPoliticalMovement]"

							blockoverride "text_left" {
								text = "POP_POLITICAL_MOVEMENTS_HEADER"
							}

							container = {
								maximumsize = { 90 30 }
								parentanchor = right
								scissor = yes

								flowcontainer = {
									parentanchor = right
									spacing = 2
									datamodel = "[Pop.AccessSupportedPoliticalMovements]"

									item = {
										icon = {
											parentanchor = left|vcenter
											size = { 28 28 }
											texture = "[PoliticalMovement.GetTexture]"
											using = tooltip_above
											tooltip = "[Pop.GetPoliticalMovementSupportDesc(PoliticalMovement.Self)]"
										}
									}
								}
							}
						}
					}
				}


				default_header = {
					blockoverride = "text" {
						text = "POP_TYPE_INFORMATION"
					}
				}

				### LORE
				textbox = {
					autoresize = yes
					datacontext = "[Pop.GetPopType]"
					datacontext = "[Pop.GetState]"
					text = "DATA_POP_TYPE_NAME_IN_STATE_TOOLTIP"
					minimumsize = { @panel_width -1 }
					maximumsize = { @panel_width -1 }
					multiline = yes
					parentanchor = hcenter
					margin = { 15 15 }
					align = nobaseline
					#default_format = "#lore"

					background = {
						using = entry_bg
					}
				}

				### DEBUG
				textbox = {
					text = "[Pop.GetDebugInfo]" # TODO: PRCAL-3641
					autoresize = yes
					align = left|nobaseline
					margin = { 15 5 }
					multiline = yes
					alpha = 0.5
				}
			}
		}
	}

	type pop_details_side_stats_item = widget {
		size = { @stat_item_width 30 }

		hbox = {
			textbox = {
				block "text_left" {
					text = ""
				}
				layoutpolicy_horizontal = expanding
				size = { 0 20 }
				elide = right
				align = left|nobaseline
			}
			block "widget_right" {
				textbox = {
					block "text_right" {
						text = ""
					}
					autoresize = yes
					max_width = @right_max_width
					elide = right
					align = right|nobaseline
				}
			}
		}
	}
}
