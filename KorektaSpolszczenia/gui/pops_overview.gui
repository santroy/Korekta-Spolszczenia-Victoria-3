# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

@portrait_size = 316
@portrait_box_height = 276

types pops_overview
{
	type pops_overview_panel = default_block_window {
		name = "pops_overview_panel"
		datacontext = "[AccessPlayer]"
		
		blockoverride "animation_state_block" {
			state = {
				name = _show
				start_sound = {
					soundeffect = "event:/SFX/UI/SideBar/population"
				}
			}

			state = {
				name = _hide
				start_sound = {
					soundeffect = "event:/SFX/UI/SideBar/population_stop"
				}
			}
		}		

		blockoverride "window_header_name"
		{
			text = "POPS_OVERVIEW_TITLE"
		}

		blockoverride "fixed_top" {
			#TABS
			tab_buttons = {
				blockoverride "first_button"
				{
					text = "POPS_OVERVIEW_STATISTICS_TAB"
				}
				blockoverride "first_button_click"
				{
					onclick = "[InformationPanel.SelectTab('statistics')]"
				}
				blockoverride "first_button_visibility"
				{
					visible = "[InformationPanel.IsTabSelected('statistics')]"
				}
				blockoverride "first_button_visibility_checked"
				{
					visible = "[Not( InformationPanel.IsTabSelected('statistics') )]"
				}
				blockoverride "first_button_selected"
				{
					text = "POPS_OVERVIEW_STATISTICS_TAB"
				}
				blockoverride "first_button_name" {
					name = "tutorial_highlight_pops_statistics"
				}

				blockoverride "second_button"
				{
					text = "POPS_OVERVIEW_POP_LIST_TAB"
				}
				blockoverride "second_button_click"
				{
					onclick = "[InformationPanel.SelectTab('pop_list')]"
				}
				blockoverride "second_button_visibility"
				{
					visible = "[InformationPanel.IsTabSelected('pop_list')]"
				}
				blockoverride "second_button_visibility_checked"
				{
					visible = "[Not( InformationPanel.IsTabSelected('pop_list') )]"
				}
				blockoverride "second_button_selected"
				{
					text = "POPS_OVERVIEW_POP_LIST_TAB"
				}
				blockoverride "second_button_name" {
					name = "tutorial_highlight_pops_pop_list"
				}
			}
		}
		
		blockoverride "scrollarea_content"
		{
			flowcontainer = {
				using = default_list_position
				direction = vertical
				datacontext = "[GetPlayer]"
				visible = "[InformationPanel.IsTabSelected('statistics')]"

				### Pop statistics
				flowcontainer = {
					direction = vertical
					margin_top = 10
					margin_bottom = 15
					spacing = 15

					flowcontainer = {
						direction = horizontal
						spacing = 10
						margin_left = 10
						
						container = {
							minimumsize = { 260 -1 }
							maximumsize = { 260 -1 }
							parentanchor = vcenter
						
							background = {
								using = entry_bg
							}
							
							flowcontainer = {
								margin = { 5 10 }
								spacing = 5
								parentanchor = center
								using = population_tooltip_with_graph

								icon = {
									texture = "gfx/interface/icons/generic_icons/population.dds"
									size = { 25 25 }
								}
								
								textbox = {
									text = "concept_population"
									autoresize = yes
									using = fontsize_large
									align = nobaseline
									parentanchor = vcenter
								}
								textbox = {
									text = " #variable [Country.GetTotalPopulation|D]#!"
									autoresize = yes
									using = fontsize_large
									align = nobaseline
									parentanchor = vcenter
								}
							}
						}

						container = {
							minimumsize = { 260 -1 }
							maximumsize = { 260 -1 }
							parentanchor = vcenter
						
							background = {
								using = entry_bg
							}
							
							flowcontainer = {
								margin = { 5 10 }
								spacing = 5
								parentanchor = center
								tooltip = "POLITICALLY_INVOLVED_POPULATION_TOOLTIP"
							
								textbox = {
									# ZMIANA # text = "concept_politically_involved"
									text = "concept_politically_involved_POP_GUI"
									autoresize = yes
									using = fontsize_large
									align = nobaseline
									parentanchor = vcenter
								}
								textbox = {
									text = " #variable [Country.GetPoliticallyInvolvedPopulation|D]#!"
									autoresize = yes
									using = fontsize_large
									align = nobaseline
									parentanchor = vcenter
								}
							}
						}
					}

					flowcontainer = {
						direction = horizontal
						spacing = 10
						margin_left = 10
						
						textbox = {
							minimumsize = { 260 -1 }
							maximumsize = { 260 -1 }
							margin = { 20 9 }
							background = {
								using = entry_bg
							}
							using = average_standard_of_living_tooltip_with_graph
							text = "COUNTRY_SOL_ALL_LABEL"
							autoresize = yes
							using = fontsize_large
							parentanchor = vcenter
							align = hcenter|nobaseline
						}

						container = {
							minimumsize = { 260 -1 }
							maximumsize = { 260 -1 }
							parentanchor = vcenter
						
							background = {
								using = entry_bg
							}
							
							flowcontainer = {
								margin = { 5 10 }
								spacing = 5
								parentanchor = center
								tooltip = "POLITICALLY_INACTIVE_POPULATION_TOOLTIP"
								
								textbox = {
									# ZMIANA # text = "concept_politically_inactive"
									text = "concept_politically_inactive_POP_GUI"
									autoresize = yes
									using = fontsize_large
									align = nobaseline
									parentanchor = vcenter
								}
								textbox = {
									text = " #variable [Country.GetInactivePopulation|D]#!"
									autoresize = yes
									using = fontsize_large
									align = nobaseline
									parentanchor = vcenter
								}
							}
						}
					}
				}

				### POP PORTRAITS AND SoL
				widget = {
					minimumsize = { @panel_width 320 }

					vbox = {
						resizeparent = yes
						margin_left = 6
						margin_top = 6

						spacing = 20

						### POP PORTRAITS AND SoL
						widget = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							minimumsize = { -1 @portrait_box_height }

							background = {
								using = entry_bg
							}

							background = {
								texture = "gfx/interface/illustrations/top_illus/top_illu_population.dds"
								using = top_illu_properties
								margin = { -2 0 }
							}

							### Portraits
							# Draw these first to prevent the portrait overlaying the group name
							hbox = {
								margin_top = 30
								margin_bottom = -4

								culture_info_pop_portrait = {
									datacontext = "[GetPlayer.GetSampleLowerStrataPop]"
									using = average_standard_of_living_lower_tooltip_with_graph
								}

								culture_info_pop_portrait = {
									datacontext = "[GetPlayer.GetSampleMiddleStrataPop]"
									using = average_standard_of_living_middle_tooltip_with_graph
								}

								culture_info_pop_portrait = {
									datacontext = "[GetPlayer.GetSampleUpperStrataPop]"
									using = average_standard_of_living_upper_tooltip_with_graph
								}
							}
							
							### Group name
							widget = {
								# Float widget top left
								size = { 100% 0 }
								minimumsize = { -1 34 }

								hbox = {
									margin_top = 10

									culture_info_pop_label = {
										blockoverride "icon" {
											texture = "gfx/interface/icons/pops_icons/sol_poor_icon.dds"
										}
										blockoverride "label" {
											text = "LOWER_NO_ICON"
										}
									}

									culture_info_pop_label = {
										blockoverride "icon" {
											texture = "gfx/interface/icons/pops_icons/sol_middle_icon.dds"
										}
										blockoverride "label" {
											text = "MIDDLE_NO_ICON"
										}
									}

									culture_info_pop_label = {
										blockoverride "icon" {
											texture = "gfx/interface/icons/pops_icons/sol_upper_icon.dds"
										}
										blockoverride "label" {
											text = "UPPER_NO_ICON"
										}
									}
								}
							}

							### Avg info
							widget = {
								# Float widget bottom left
								size = { 100% 0 }
								minimumsize = { -1 34 }
								parentanchor = bottom

								hbox = {
									margin_bottom = 10

									culture_info_avg_sol_label = {
										text = "COUNTRY_SOL_LOW_LABEL"
									}
									culture_info_avg_sol_label = {
										text = "COUNTRY_SOL_MIDDLE_LABEL"
									}
									culture_info_avg_sol_label = {
										text = "COUNTRY_SOL_UPPER_LABEL"
									}
								}
							}
						}
					}
				}

				pops_overview_statistics = {
					margin_top = 20
				}
			}

			pop_list = {
				visible = "[InformationPanel.IsTabSelected('pop_list')]"

				blockoverride "pop_list_context" {
					datacontext = "[PopsOverviewPanel.AccessPopsList]"
				}
			}
		}
	}

	### POP CATEGORY ENTRY 
	type pop_overview_category_entry = container {
		parentanchor = hcenter
		minimumsize = { @panel_width_plus_20 -1 }

		flowcontainer = {
			parentanchor = hcenter
			minimumsize = { @panel_width_plus_20 -1 }
			direction = vertical
			spacing = 5
			
			alwaystransparent = no
		
			default_header = {
				parentanchor = hcenter
				
				blockoverride "text" {
					block "header_text" {
						text = "Religion"
					}
				}
			}
			
			flowcontainer = {
				minimumsize = { @panel_width -1 }
				parentanchor = hcenter
				spacing = 5
				
				block "piecharts" {
					religion_population_piechart = {}
					religion_pol_str_piechart = {}
				}
			}
		}
	}

	type culture_population_piechart = chart {
		blockoverride "datamodel" {
			datamodel = "[AccessPlayer.AccessPopCulturesSortedByPopulation]"
		}

		empty_state = {
			blockoverride "visible" {
				visible = "[IsDataModelEmpty(AccessPlayer.AccessPopCulturesSortedByPopulation)]"
			}
			blockoverride "text" {
				text = "NO_CULTURES"
			}
		}

		blockoverride "heading" {
			text = "POPULATION_PIECHART_HEADER"
		}

		blockoverride "tooltip" {
			tooltip = "CULTURE_PIECHART"
		}

		blockoverride "pieslice" {
			value = "[Culture.GetPopulationAsFloat(GetPlayer)]"
		}

		blockoverride "color" {
			color = "[Culture.GetColor]"
		}
		
		blockoverride "pie_item_goto_button" {
			button = {
				using = clean_button
				size = { 100% 100% }
				onclick = "[InformationPanelBar.OpenCultureInfoPanel(Culture.AccessSelf)]"
			}
		}

		blockoverride "leftside_info" {
			text = "[Culture.GetName|U]" # ZMIANA U
		}

		blockoverride "rightside1_info" {
			text = "[Culture.GetPopulationAsPercentage(GetPlayer)|v/%d]"
		}

		blockoverride "rightside2_info" {
			text = "([Culture.GetPopulation(GetPlayer)|D])"
		}
	}
	
	type culture_pol_str_piechart = chart {
		blockoverride "datamodel" {
			datamodel = "[AccessPlayer.AccessPopCulturesSortedByPolStr]"
		}

		#empty_state = {
		#	blockoverride "visible" {
		#		visible = "[IsDataModelEmpty(AccessPlayer.AccessPopCulturesSortedByPolStr)]"
		#	}
		#	blockoverride "text" {
		#		text = "NO_CULTURES_POL_STR"
		#	}
		#}

		blockoverride "heading" {
			text = "POLITICAL_STRENGTH_PIECHART_HEADER"
		}

		blockoverride "tooltip" {
			tooltip = "CULTURE_PIECHART_POL_STR"
		}

		blockoverride "pieslice" {
			value = "[Culture.GetPolStrAsFloat(GetPlayer)]"
		}
		
		blockoverride "color" {
			color = "[Culture.GetColor]"
		}
		
		blockoverride "pie_item_goto_button" {
			button = {
				using = clean_button
				size = { 100% 100% }
				onclick = "[InformationPanelBar.OpenCultureInfoPanel(Culture.AccessSelf)]"
			}
		}

		blockoverride "leftside_info" {
			text = "[Culture.GetName|U]" # ZMIANA U
		}

		blockoverride "rightside1_info" {
			text = "[Culture.GetPolStrAsPercentage(GetPlayer)|v/%d]"
		}

		blockoverride "rightside2_info" {
			text = "([Culture.GetPolStr(GetPlayer)|K])"
		}
	}
	
	type religion_population_piechart = chart {
		blockoverride "datamodel" {
			datamodel = "[AccessPlayer.AccessPopReligionsSortedByPopulation]"
		}

		empty_state = {
			blockoverride "visible" {
				visible = "[IsDataModelEmpty(AccessPlayer.AccessPopReligionsSortedByPopulation)]"
			}
			blockoverride "text" {
				text = "NO_RELIGIONS"
			}
		}

		blockoverride "heading" {
			text = "POPULATION_PIECHART_HEADER"
		}

		blockoverride "tooltip" {
			tooltip = "RELIGION_PIECHART"
		}

		blockoverride "pieslice" {
			value = "[Religion.GetPopulationAsFloat(GetPlayer)]"
		}

		
		blockoverride "color" {
			color = "[Religion.GetColor]"
		}
		
		blockoverride "pie_item_goto_button" {
			button = {
				using = clean_button
				size = { 100% 100% }
				onclick = "[InformationPanelBar.OpenReligionInfoPanel(Religion.AccessSelf)]"
			}
		}

		blockoverride "leftside_info" {
			text = "[Religion.GetName]"
		}

		blockoverride "rightside1_info" {
			text = "[Religion.GetPopulationAsPercentage(GetPlayer)|v/%d]"
		}

		blockoverride "rightside2_info" {
			text = "([Religion.GetPopulation(GetPlayer)|K])"
		}
	}
	
	type religion_pol_str_piechart = chart {
		blockoverride "datamodel" {
			datamodel = "[AccessPlayer.AccessPopReligionsSortedByPolStr]"
		}

		empty_state = {
			blockoverride "visible" {
				visible = "[IsDataModelEmpty(AccessPlayer.AccessPopReligionsSortedByPolStr)]"
			}
			blockoverride "text" {
				text = "NO_RELIGIONS_POL_STR"
			}
		}

		blockoverride "heading" {
			text = "POLITICAL_STRENGTH_PIECHART_HEADER"
		}
		
		blockoverride "tooltip" {
			tooltip = "RELIGION_PIECHART_POL_STR"
		}

		blockoverride "pieslice" {
			value = "[Religion.GetPolStrAsFloat(GetPlayer)]"
		}

		
		blockoverride "color" {
			color = "[Religion.GetColor]"
		}
		
		blockoverride "pie_item_goto_button" {
			button = {
				using = clean_button
				size = { 100% 100% }
				onclick = "[InformationPanelBar.OpenReligionInfoPanel(Religion.AccessSelf)]"
			}
		}

		blockoverride "leftside_info" {
			text = "[Religion.GetName]"
		}

		blockoverride "rightside1_info" {
			text = "[Religion.GetPolStrAsPercentage(GetPlayer)|v/%d]"
		}

		blockoverride "rightside2_info" {
			text = "([Religion.GetPolStr(GetPlayer)|K])"
		}
	}
	
	type pop_type_population_piechart = chart {
		blockoverride "datamodel" {
			datamodel = "[AccessPlayer.AccessPopTypesSortedOnPopulation]"
		}

		empty_state = {
			blockoverride "visible" {
				visible = "[IsDataModelEmpty(AccessPlayer.AccessPopTypesSortedOnPopulation)]"
			}
			blockoverride "text" {
				text = "NO_POP_TYPES"
			}
		}

		blockoverride "heading" {
			text = "POPULATION_PIECHART_HEADER"
		}

		blockoverride "tooltip" {
			tooltip = "POP_TYPE_PIECHART"
		}

		blockoverride "pieslice" {
			value = "[PopType.GetPopulationAsFloat(GetPlayer)]"
		}

		
		blockoverride "color" {
			color = "[PopType.GetColor]"
		}

		blockoverride "leftside_info" {
			text = "[PopType.GetName]"
		}

		blockoverride "rightside1_info" {
			text = "[PopType.GetPopulationAsPercentage(GetPlayer)|v/%d]"
		}

		blockoverride "rightside2_info" {
			text = "([PopType.GetPopulation(GetPlayer)|K])"
		}
	}
	
	type pop_type_pol_str_piechart = chart {
		blockoverride "datamodel" {
			datamodel = "[AccessPlayer.AccessPopTypesSortedOnPolStr]"
		}

		empty_state = {
			blockoverride "visible" {
				visible = "[IsDataModelEmpty(AccessPlayer.AccessPopTypesSortedOnPopulation)]"
			}
			blockoverride "text" {
				text = "NO_POP_TYPES_POL_STR"
			}
		}

		blockoverride "heading" {
			text = "POLITICAL_STRENGTH_PIECHART_HEADER"
		}

		blockoverride "tooltip" {
			tooltip = "POP_TYPE_PIECHART_POL_STR"
		}

		blockoverride "pieslice" {
			value = "[PopType.GetPolStrAsFloat(GetPlayer)]"
		}

		
		blockoverride "color" {
			color = "[PopType.GetColor]"
		}

		blockoverride "leftside_info" {
			text = "[PopType.GetName]"
		}

		blockoverride "rightside1_info" {
			text = "[PopType.GetPolStrAsPercentage(GetPlayer)|v/%d]"
		}

		blockoverride "rightside2_info" {
			text = "([PopType.GetPolStr(GetPlayer)|K])"
		}
	}

	### STATISTICS
	type pops_overview_statistics = flowcontainer {
		using = default_list_position
		spacing = 10
		direction = vertical
		
		### pop type
		pop_overview_category_entry = {
			blockoverride "animation" {
				name = pops_overview_panel_show
				on_finish = "[PdxGuiTriggerAllAnimations('pops_overview_panel_section_2')]"
			}
			blockoverride "header_text" {
				text = "POP_TYPE_HEADER"
			}
			blockoverride "animation_enter" {
				name = pop_overview_poptype_enter
			}
			blockoverride "animation_leave" {
				name = pop_overview_poptype_leave
			}
			blockoverride "piecharts" {
				pop_type_population_piechart = {}
				pop_type_pol_str_piechart = {}
			}
			blockoverride "icon" {
				texture = "gfx/interface/population/pop_type.dds"
			}
		}
		
		### culture
		pop_overview_category_entry = {
			blockoverride "animation" {
				name = pops_overview_panel_section_2
				on_finish = "[PdxGuiTriggerAllAnimations('pops_overview_panel_section_3')]"
			}
			blockoverride "header_text" {
				text = "POP_CULTURE_HEADER"
			}
			blockoverride "animation_enter" {
				name = pop_overview_culture_enter
			}
			blockoverride "animation_leave" {
				name = pop_overview_culture_leave
			}
			blockoverride "piecharts" {
				culture_population_piechart = {}
				culture_pol_str_piechart = {}
			}
			blockoverride "icon" {
				texture = "gfx/interface/population/pop_culture.dds"
			}
		}
		
		### religion
		pop_overview_category_entry = {
			blockoverride "animation" {
				name = pops_overview_panel_section_3
			}
			blockoverride "header_text" {
				text = "POP_RELIGION_HEADER"
			}
			blockoverride "animation_enter" {
				name = pop_overview_religion_enter
			}
			blockoverride "animation_leave" {
				name = pop_overview_religion_leave
			}
			blockoverride "piecharts" {
				religion_population_piechart = {}
				religion_pol_str_piechart = {}
			}
			blockoverride "icon" {
				texture = "gfx/interface/population/pop_religion.dds"
			}
		}
	}

	### POP LIST
	type pop_list = flowcontainer {
		direction = vertical
		using = default_list_position
		spacing = 5
		margin_bottom = 15
		
		block "pop_list_context" {}
		
		datamodel = "[PopList.AccessPopList]"

		item = {
			flowcontainer = {
				direction = vertical
				spacing = 0

				background = {
					using = entry_bg
				}

				### EXPANDABLE ENTRY
				widget = {
					size = { @panel_width_plus_10 110 }
					datacontext = "[PopListItem.GetPopType]"
					# Only show slaves drawer if country has slavery. `IsValid` check just for safety, should be always valid in the context of buildings.
					visible = "[Or(Or( Not( PopListItem.GetPopType.IsSlave ), Not(IsDataModelEmpty(PopListItem.GetPops))), Or( Not( PopListItem.GetCountry.IsValid ), PopListItem.GetCountry.HasAnySlavery ) )]"

					flowcontainer = {
						datacontext = "[PopListItem.GetFirstPop]"
						margin_left = 5
						parentanchor = vcenter
						
						pop_portrait_simple = {

							blockoverride "portrait_button" {}
							
							size = { 100 100 }
							
							background = {
								using = pop_bg
							}
							
							blockoverride "portrait_size" {
								size = { 125 125 }
							}
						}
					}

					### DROPDOWN / EXPAND
					section_header_button = {
						parentanchor = right
						position = { 0 2 }
						size = { 440 38 }
						
						blockoverride "left_text" {
							text = "#bold [PopListItem.GetPopType.GetNameNoIcon]#!"
						}

						blockoverride "right_text" {
							section_header_right_text = {
								block "right_text_text" {
									text = "[PopListItem.GetTotalPopSize|vD]"
									tooltip = "POP_LIST_TOTAL_TOOLTIP"
								}
								margin_right = 70
							}
						}
						
						blockoverride "onclick" {
							onclick = "[PopListItem.ToggleExpand]"
						}
						
						blockoverride "onclick_showmore" {
							visible = "[Not(PopListItem.IsExpanded)]"
						}

						blockoverride "onclick_showless" {
							visible = "[PopListItem.IsExpanded]"
						}
						
						icon = {
							size = { 45 45 }
							position = { -15 -1 }
							parentanchor = right|vcenter
							texture = "[PopListItem.GetPopType.GetTexture]"
						}
						
						widget = {
							size = { 100% 100% }
							datacontext = "[PopListItem]"

							block "tooltipwidget" {
							
								tooltipwidget = {
									FancyTooltip_PopType = {}
								}
							}
						}
					}		
					
					widget = {
						parentanchor = right
						size = { 440 50 }
						position = { -1 52 }

						# left info
						container = {
							position = { -1 -1 }
							parentanchor = left|vcenter
							
							### LARGEST INTEREST GROUPS
							block "largest_IGs" {
								flowcontainer = {
									visible = "[Not(PopListItem.HasBuildingContext)]"
									datamodel = "[PopListItem.AccessTwoLargestIGs]"
									spacing = 5

									item = {
										ig_button = {}
									}
								}
							}
							
							### INFO FOR WORKFORCE IN BUILDINGS
							flowcontainer = {
								direction = vertical
								visible = "[PopListItem.HasBuildingContext]"

								### POP TYPE REPLACEMENT
								textbox = {
									text = "[PopListItem.GetPopTypeReplacementDesc()]"
									align = left|nobaseline
									autoresize = yes
								} 

								### WAGE
								textbox = {
									visible = "[Not(PopListItem.IsRoleFullyReplacedByAnotherPopType)]"
									text = "AVG_WAGE_POP_LIST"
									align = left|nobaseline
									autoresize = yes
									tooltip = "ANNUAL_WAGE_TOOLTIP"
									alpha = "[TransparentIfFalse(GreaterThan_CFixedPoint(PopListItem.GetAverageAnnualWage, '(CFixedPoint)0'))]"
								}
								
								### WORKERS
								flowcontainer = {
									direction = vertical
									tooltip = "[PopListItem.GetPopTypeEmploymentDesc]"
									spacing = 4
									margin_top = 4
									margin_bottom = 10

									textbox = {
										text = "[PopListItem.GetPopTypeFullyReplacedDesc]"
										align = left|nobaseline
										autoresize = yes
									}

									default_progressbar_horizontal = {
										size = { 250 23 }
										visible = "[Not(PopListItem.IsRoleFullyReplacedByAnotherPopType)]"
										blockoverride "values" {
											min = -1    # Set to -1, otherwise zero slaves bar (before starts hiring) will be constantly filling up
											max = "[IntToFloat(PopListItem.GetMaxPopSize)]"
											value = "[IntToFloat(PopListItem.GetWorkingAdultsPopSize)]"
										}
										
										flowcontainer = {
											parentanchor = vcenter
											margin_left = 10
											textbox = {
												text = "#bold [PopListItem.GetWorkingAdultsPopSize|D]#!"
												autoresize = yes
												align = center|nobaseline
												parentanchor = vcenter
											}

											textbox = {
												visible = "[LessThan_int32(PopListItem.GetWorkingAdultsPopSize, PopListItem.GetMaxPopSize)]"
												margin_left = 7
												text = "/ #maximum [PopListItem.GetMaxPopSize|D]#!"
												autoresize = yes
												align = center|nobaseline
												parentanchor = vcenter
											}
										}
									}
								}
							}
						}

						### STANDARD OF LIVING
						textbox = {
							position = { -10 10 }
							visible = "[GreaterThan_int32( PopListItem.GetWorkingAdultsPopSize, '(int32)0' )]"
							parentanchor = right
							text = "POPS_LIST_SOL"
							autoresize = yes
							align = center|nobaseline
							tooltip = "POPS_LIST_SOL_TOOLTIP"
						}
					}
				}
				
				### EXPANDED
				expanded_list = {
					minimumsize = { @panel_width -1 }
					maximumsize = { @panel_width -1 }
					using = expanded_list_bg
					visible = "[PopListItem.IsExpanded]"
					datamodel = "[PopListItem.GetPops]"

					textbox = {
						visible = "[Not(PopListItem.IsAllPopsShown)]"
						parentanchor = left
						widgetanchor = left
						text = "POP_LIST_NOT_ALL_POPS_SHOWN"
						autoresize = yes
						align = left|nobaseline
					}
						
					item = {
						container = {
							parentanchor = hcenter
							name = "tutorial_highlight_pop"
							
							widget = {
								size = { @panel_width 125 }
								datacontext = "[PopListPopEntry.AccessPop]"
								visible = "[Pop.IsValid]"
								
								background = {
									using = entry_bg_simple
								}
								
								### portrait + size
								button = {
									size = { 95 110 }
									position = { 5 0 }
									parentanchor = vcenter
									using = default_button
									onclick = "[InformationPanelBar.OpenPopDetailsPanel(Pop.AccessSelf)]"
									onmousehierarchyenter = "[AccessHighlightManager.HighlightState(Pop.GetState.Self)]"
									onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"

									tooltipwidget = {
										FancyTooltip_Pop = {}
									}
									pop_portrait_simple = {
										position = { 0 0 }
										parentanchor = bottom|hcenter
										blockoverride "portrait_button" {
											alwaystransparent = yes
										}
									}
									textbox = {
										position = { 0 4 }
										block "pop_size_info" {
											text = "[Pop.GetTotalSize|Dv]"
										}
										using = pop_population_tooltip_with_graph
										size = { 100% 25 }
										align = center|nobaseline
										using = fontsize_large
										parentanchor = top|hcenter
										
										background = {
											using = dark_area
											margin = { -5 0 }
										}
									}
								}

								### left side
								flowcontainer = {
									position = { 110 0 }
									direction = vertical
									parentanchor = left|vcenter
									
									#total size info (for workforce panel)
									block "total_info" {}
									
									flowcontainer = {
										datacontext = "[Pop.GetCountry]"
										flowcontainer = {
											direction = vertical
											
											#culture
											button = {
												size = { 200 27 }
												using = clean_button
												onclick = "[InformationPanelBar.OpenCultureInfoPanel(Pop.AccessCulture)]"
														
												textbox = {
													size = { 100% 100% }
													text = "[Pop.GetCulture.GetName|U]" # ZMIANA U
													elide = right
													align = left|nobaseline
													margin = { 10 0 }
													tooltip = "POP_CULTURE_ACCEPTANCE"
												}
											}
											
											#religion
											button = {
												size = { 200 27 }
												using = clean_button
												onclick = "[InformationPanelBar.OpenReligionInfoPanel(Pop.AccessReligion)]"
												
												icon = {
													size = { 25 25 }
													datacontext = "[Pop.GetReligion]"
													texture = "[Religion.GetTexture]"
													parentanchor = right|vcenter
													position = { -3 0 }
												}
														
												textbox = {
													size = { 100% 100% }
													text = "[Pop.GetReligion.GetName]"
													elide = right
													align = left|nobaseline
													margin = { 10 0 }
													margin_right = 30
													tooltip = "POP_RELIGION_ACCEPTANCE"
												}
											}
										}
										
										#acceptance icon
										widget = {
											parentanchor = vcenter
											size = { 40 40 }
											
											icon = {
												tooltip = "DISCRIMINATION_TOOLTIP"
												visible = "[Pop.IsDiscriminated]"
												texture = "gfx/interface/icons/generic_icons/discriminated_icon.dds"
												size = { 100% 100% }
											}
										
											icon = {
												tooltip = "ACCEPTED_TOOLTIP"
												visible = "[Not(Pop.IsDiscriminated)]"
												texture = "gfx/interface/icons/generic_icons/accepted_icon.dds"
												size = { 100% 100% }
											}
										}
									}
									
									block "building_and_state" {
										button = {
											size = { 200 27 }
											using = clean_button
											onclick = "[InformationPanelBar.OpenStatePanel(Pop.AccessState)]"
													
											textbox = {
												size = { 100% 100% }
												text = "[Pop.GetState.GetName]"
												elide = right
												align = left|nobaseline
												margin = { 10 0 }
											}
										}
											
										button = {
											visible = "[Pop.IsEmployed]"
											size = { 200 27 }
											using = clean_button
											onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(Pop.AccessBuilding)]"
											
											textbox = {
												margin_right = 35
												margin_left = 10
												text = "[Pop.GetBuilding.GetName]"
												size = { 100% 100% }
												align = nobaseline
												elide = right
												parentanchor = vcenter
											}
											icon = {
												position = { -5 0 }
												size = { 22 22 }
												texture = "[Pop.GetBuilding.GetTexture]"
												tooltip = "[Pop.GetBuilding.GetTooltip]"
												parentanchor = right|vcenter
											}
										}
										
										textbox = {
											size = { 200 27 }
											text = "UNEMPLOYED"
											align = left|nobaseline
											visible = "[Not(Pop.IsEmployed)]"
											margin = { 10 0 }
											alpha = 0.5
											elide = right
										}
									}
								}
								
								### right side
								flowcontainer = {
									position = { -10 0 }
									direction = vertical
									parentanchor = right|vcenter
									spacing = 10

									flowcontainer = {
										parentanchor = right
										spacing = 5
										visible = "[Not(PopListPopEntry.HasContextIGSet)]"

										textbox = {
											tooltip = POP_IG_ATTRACTION_HEADER_NO_CLICK
											visible = "[Pop.GetLargestInterestGroup.IsValid]"
											text = "[Pop.GetLargestInterestGroup.GetNameNoFormatting]"
											size = { 145 30 }
											elide = right
											align = right|nobaseline
											parentanchor = vcenter
										}
										textbox = {
											visible = "[Not(Pop.GetLargestInterestGroup.IsValid)]"
											text = "concept_politically_inactive"
											tooltip = POP_IG_INACTIVE_HEADER
											size = { 145 30 }
											elide = right
											align = right|nobaseline
											parentanchor = vcenter
										}
										
										ig_button = {
											size = { 35 35 }
											
											#PRCAL-7234
											datacontext = "[Pop.GetLargestInterestGroup]"
											blockoverride "powerful_visibility" {
												visible = "[Pop.GetLargestInterestGroup.IsPowerful]"
											}
											blockoverride "onclick" {
												onclick = "[InformationPanelBar.OpenInterestGroupPanel(Pop.AccessLargestInterestGroup)]"
											}
											blockoverride "tooltip" {
												tooltip = POP_IG_ATTRACTION_HEADER
											}
										}	
									}

									textbox = {
										text = "[Pop.GetFormattedStandardOfLivingLabel|v] ([Pop.GetFormattedStandardOfLiving|v])"
										using = pop_sol_tooltip_with_graph
										size = { 185 30 }
										elide = right
										align = right|nobaseline
										parentanchor = right
										margin_right = 2
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
